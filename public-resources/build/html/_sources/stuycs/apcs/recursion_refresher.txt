 Recursion: A Refresher   Outline     What is Recursion   Recursive reduction is the process of breaking down a larger problem into smaller pieces each time the function is called.  A recursive function is a function that calls itself using recursive reduction until it has reached a base case.  What is a Base Case   A base case is sometimes refer to as the exit case.  It should:  NOT call the recursive function (should not be expressed in a recursive manner) Typically return a simple constant of some form (a number, a string, etc) Sample values for integers: 0, 1, 2 Sample values for Strings: ” ”, “a”, “” Sample values for Arrays: [], [0]   Warning These sample values are not the only possible values for base cases.  What is a Head Recursive Function   The first form of recursion you learn in Intro CS was head recursion and is characterized by:  Deferred operations: operations that cannot be computed yet because there are still unknown components This causes the stack to grow until we reach the base case  No wrapper functions: We do not need to keep track of additional variables The recursive call is the first statement to be evaluated after the base case May be more memory intensive   Example of Head Recursion   public static int factorial(int n){      if (n < 2){          return n;      }else{          return n * factorial(n - 1);          // assuming you are not returning above...          // the rest of the computation will go here if there are any      }  }    What is a Tail Recursive Function   The second form of recursion that you might have covered is characterized by:  NO deferred operations Usage of state variables The recursive call is the last operation to be performed, all computations come before it   What are State Variables   State variables are variables that serve a specific role in a function.  They allow us to:  Keep track of properties of the function as it is running, such as a counter Use the aforementioned data to continue an interrupted recursive call  Some of the most commonly asked questions about state variables are:  How many state variables should you use? Answer: There is no definite answer. Generally, you will need one to keep track of the answer and maybe  another for a counter.  Use however many you feel is necessary.  Am I doing it wrong if I use more state variables than my classmate? Answer: The most important attribute of a good program is that it works correctly.  Do not worry if your  classmate uses less state variables (especially if their solution is wrong).  With more practice, you will  realize how to trim away unnecessary state variables.   Tip Keep in mind that more state variables can improve the readability of your code.  Example of Tail Recursion   public static int factorial(int n){      return factorialHelper(n, 1);  }    public static int factorialHelper(int n, int answer){      if (n < 2){          return answer;      }else{          // all computation will go here, before the recursive call          return factorial(n - 1, answer * n);      }  }    