Abstract Classes and Methods
============================

*Written by PChan on 2017-04-25*

* :ref:`tutorial_apcs_ap_java_abstract_classes_and_methods_overview`
* :ref:`tutorial_apcs_ap_java_abstract_classes_and_methods_defining_abstract_classes_and_methods`

.. _tutorial_apcs_ap_java_abstract_classes_and_methods_overview:

Overview
--------

.. glossary::

   Abstract Method
      A method without a body (merely the return type and the signature).

   Abstract Class
      A class that represents something *abstract* like an idea.
   
At least, some of the methods inside an abstract classes are not defined because there is no valid
definition for them.  These methods must be defined in the subclasses unless the subclass is *abstract* as
well.

.. _tutorial_apcs_ap_java_abstract_classes_and_methods_defining_abstract_classes_and_methods:

Defining Abstract Classes and Methods
-------------------------------------
An *abstract method* is declared by adding the ``abstract`` keyword after the visibility and before the
return type:
::

   // General Syntax
   public abstract returnType methodName();

   // Example
   public abstract double area();

Generally, an abstract method would have no body as you would need to override the definition anyway. But,
adding a body would not cause an error (waste of your time though).

If you have at least one *abstract method* in a class, you must make the class *abstract* like so:
::

   // General Syntax
   public abstract class AbstractClass{
   
   }

   // Example
   public abstract class Quadralateral{
   
   }

.. warning::
   An *abstract method* must be inside an *abstract class*.  An *abstract class* does **NOT** have to
   contain an *abstract method*.
